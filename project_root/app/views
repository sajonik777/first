from flask import Flask, jsonify
import json
import os
import sys

# Assuming NaServer.py is in the same directory as this script
current_directory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(current_directory)

import NaServer

app = Flask(__name__)

@app.route('/')
def main():
    s = NaServer.NaServer("your_netapp_hostname", 1 , 160)
    s.set_server_type("FILER")
    s.set_transport_type("HTTPS")
    s.set_port(443)
    s.set_style("LOGIN")
    s.set_admin_user("your_username", "your_password")

    # Get system information
    system_info = s.invoke("system-get-info")

    # Get ONTAP version
    ontap_version = s.invoke("system-get-ontapi-version")

    # Get disk array information
    disk_array = s.invoke("storage-disk-get-iter")

    # Get assembly parts and their serial numbers
    assembly_parts = s.invoke("environment-sensors-get-iter")

    # Get controllers data
    controllers_data = s.invoke("system-get-version")

    # Get volume information
    volume_info = s.invoke("volume-get-iter")

    # Get network interface information
    network_interface_info = s.invoke("net-interface-get-iter")

    # Get snapshot information
    snapshot_info = s.invoke("snapshot-get-iter")

    # Collect all data into a dictionary
    data = {
        "system_info": print_system_info(system_info),
        "ontap_version": print_ontap_version(ontap_version),
        "disk_array": print_disk_array(disk_array),
        "assembly_parts": print_assembly_parts(assembly_parts),
        "controllers_data": print_controllers_data(controllers_data),
        "volume_info": print_volume_info(volume_info),
        "network_interface_info": print_network_interface_info(network_interface_info),
        "snapshot_info": print_snapshot_info(snapshot_info),
    }

    return jsonify(data)

def print_system_info(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get system info: %s" % result}
    else:
        return {
            "System ID": output.child_get_string("system-id"),
            "System Name": output.child_get_string("system-name"),
            "System Model": output.child_get_string("system-model"),
            "System Serial Number": output.child_get_string("system-serial-number"),
        }

def print_ontap_version(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get ONTAP version: %s" % result}
    else:
        return {"ONTAP Version": output.child_get_string("version")}

def print_disk_array(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get disk array: %s" % result}
    else:
        disks = output.child_get("attributes-list").children_get()
        disk_array = []
        for disk in disks:
            disk_array.append({
                "Disk Name": disk.child_get_string("disk-name"),
                "Disk UID": disk.child_get_string("disk-uid")
            })
        return {"Disk Array": disk_array}

def print_assembly_parts(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get assembly parts: %s" % result}
    else:
        parts = output.child_get("assembly-parts").children_get()
        assembly_parts = []
        for part in parts:
            assembly_parts.append({
                "Part Name": part.child_get_string("part-name"),
                "Serial Number": part.child_get_string("serial-number")
            })
        return {"Assembly Parts": assembly_parts}

def print_volume_info(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get volume info: %s" % result}
    else:
        volumes = output.child_get("attributes-list").children_get()
        volume_info = []
        for volume in volumes:
            volume_info.append({
                "Volume Name": volume.child_get_string("name"),
                "Volume Size": volume.child_get_string("size")
            })
        return {"Volume Information": volume_info}

def print_network_interface_info(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get network interface info: %s" % result}
    else:
        interfaces = output.child_get("attributes-list").children_get()
        network_interface_info = []
        for interface in interfaces:
            network_interface_info.append({
                "Interface Name": interface.child_get_string("name"),
                "Interface IP": interface.child_get_string("ip-address")
            })
        return {"Network Interface Information": network_interface_info}

def print_snapshot_info(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get snapshot info: %s" % result}
    else:
        snapshots = output.child_get("attributes-list").children_get()
        snapshot_info = []
        for snapshot in snapshots:
            snapshot_info.append({
                "Snapshot Name": snapshot.child_get_string("name"),
                "Snapshot Size": snapshot.child_get_string("size")
            })
        return {"Snapshot Information": snapshot_info}

def print_controllers_data(output):
    if (output.results_errno() != 0):
        result = output.results_reason()
        return {"error": "Failed to get controllers data: %s" % result}
    else:
        return {
            "Version": output.child_get_string("version"),
            "Version Tuple": output.child_get_string("version-tuple")
        }

app.run(host='127.0.0.1', port=5000, debug=True)